class Gradebook:
    def __init__(self):
        self.students = {}  # Dictionary to store students and their grades

    def add_student(self, student_name):
        if student_name not in self.students:
            self.students[student_name] = {}  # Create a new student entry with an empty dictionary

    def add_grade(self, student_name, assignment, grade):
        if student_name in self.students:
            student_grades = self.students[student_name]
            student_grades[assignment] = grade  # Add the grade for a specific assignment

    def calculate_average(self, student_name):
        if student_name in self.students:
            student_grades = self.students[student_name]
            if student_grades:
                total = sum(student_grades.values())
                return total / len(student_grades)
            else:
                return 0  # No grades available
        else:
            return None  # Student not found

    def get_student_grades(self, student_name):
        if student_name in self.students:
            return self.students[student_name]
        else:
            return None

# Example usage:
gradebook = Gradebook()

# Adding students
gradebook.add_student("Alice")
gradebook.add_student("Bob")

# Assigning grades
gradebook.add_grade("Alice", "Assignment 1", 85)
gradebook.add_grade("Alice", "Assignment 2", 92)
gradebook.add_grade("Bob", "Assignment 1", 78)
gradebook.add_grade("Bob", "Assignment 2", 88)

# Calculating averages
alice_average = gradebook.calculate_average("Alice")
bob_average = gradebook.calculate_average("Bob")

print("Alice's Average:", alice_average)
print("Bob's Average:", bob_average)

# Getting student grades
alice_grades = gradebook.get_student_grades("Alice")
bob_grades = gradebook.get_student_grades("Bob")

print("Alice's Grades:", alice_grades)
print("Bob's Grades:", bob_grades)
